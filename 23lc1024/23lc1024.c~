#include "23lc1024_driver.h"
//#include "Arduino.h"

void NOP();
/************user defined*************/
#define _BV(bit) (1 << (bit))
#define _SPI_port PORTB
#define _SPI_state DDRB
#define _CS   _BV(PORTB2)
#define _SCK  _BV(PORTB5)
#define _MOSI  _BV(PORTB3)
#define _MISO  _BV(PORTB4)
#define _SPI_OUT_Mask  (_CS|_SCK|_MOSI)


#define SPI_CLOCK_DIV4 0x00
#define SPI_CLOCK_DIV16 0x01
#define SPI_CLOCK_DIV64 0x02
#define SPI_CLOCK_DIV128 0x03
#define SPI_CLOCK_DIV2 0x04
#define SPI_CLOCK_DIV8 0x05
#define SPI_CLOCK_DIV32 0x06
//#define SPI_CLOCK_DIV64 0x07

#define SPI_MODE0 0x00
#define SPI_MODE1 0x04
#define SPI_MODE2 0x08
#define SPI_MODE3 0x0C

#define SPI_MODE_MASK 0x0C  // CPOL = bit 3, CPHA = bit 2 on SPCR
#define SPI_CLOCK_MASK 0x03  // SPR1 = bit 1, SPR0 = bit 0 on SPCR
#define SPI_2XCLOCK_MASK 0x01  // SPI2X = bit 0 on SPSR


inline static byte _SPI_transfer(byte data){
	SPDR = data;
	while (!(SPSR & _BV(SPIF)));
	return SPDR;

//	return SPI.transfer(data);
}




/************user defined*************/


/*-----------user modified------------*/
#define ADDR uint32_t

#define _CS_HIGH_()  (_SPI_port|=_CS)
#define _CS_LOW_()  (_SPI_port&=~_CS)
#define _SCK_HIGH_()  (_SPI_port|=_SCK)
#define _SCK_LOW_()  (_SPI_port&=~_SCK)
#define _MOSI_HIGH_()  (_SPI_port|=_MOSI)
#define _MOSI_LOW_()  (_SPI_port&=~_MOSI)
#define _MISO_HIGH_()  (_SPI_port|=_MISO)
#define _MISO_LOW_()  (_SPI_port&=~_MISO)

 void NOP(){

}

 inline static void _SPI_begin(){

	_SPI_state &= ~_MISO;
	_SPI_port |= _CS;
	NOP();
	_SPI_state |= _CS;

	SPCR |= _BV(MSTR);
	SPCR |= _BV(SPE);

	_SPI_state |= _SPI_OUT_Mask;
	_SPI_port |= _SCK;
	_SPI_port |= _MOSI;
}

 inline static void _SPI_end(){
	 SPCR &= ~_BV(SPE);
}


 void _SPI_setDataMode(unsigned char mode)
 {
   SPCR = (SPCR & ~0x0C) | mode;
 }


 void _SPI_setClockDivider(unsigned char rate)
 {
   SPCR = (SPCR & ~0x03) | (rate & 0x03);
   SPSR = (SPSR & ~0x03) | ((rate >> 2) & 0x03);
 }


 void _SPI_setBitOrder(uint8_t bitOrder)
 {
   if(bitOrder == LSBFIRST) {
     SPCR |= _BV(DORD);
   } else {
     SPCR &= ~(_BV(DORD));
   }
 }


 void _SPI_init(){
	 _SPI_begin();
	_SPI_setDataMode(SPI_MODE3); //equal to SPI.setDataMode(SPI_MODE3);
	_SPI_setClockDivider(SPI_CLOCK_DIV4);//SPI.setClockDivider(SPI_CLOCK_DIV4); //half speed, if the wire is too long may set this to SPI_CLOCK_DIV8
	_SPI_setBitOrder(MSBFIRST);
 }



 inline static char _SPI_read_char(){
		 return _SPI_transfer(0);
}

 inline static void _SPI_write_char(char wr_data){
		 _SPI_transfer(wr_data);
}



 inline static void _SPI_read_array(uint16_t size , char * rt_data){
	 for(uint16_t i = 0; i < size; i++){
		 rt_data[i] = _SPI_transfer(0);
	}
}


 inline static void _SPI_write_array(uint16_t size ,char * wr_data){
	 for(uint16_t i = 0; i < size; i++){
		 _SPI_transfer(wr_data[i]);
	}
}



/*-----------user modified------------*/




/*-----------23LC1024_driver-------------*/
void _23lc1024_reset()
{
	NOP();
	_MOSI_HIGH_();
	_MISO_HIGH_();
	_SCK_LOW_();
	_CS_HIGH_();
	_SCK_HIGH_();
	_SCK_LOW_();
	_SCK_HIGH_();
	_SCK_LOW_();
	_CS_LOW_();
	NOP();
	NOP();
	_CS_HIGH_();
	_SCK_HIGH_();
	_SCK_LOW_();
	_SCK_HIGH_();
	_SCK_LOW_();
	_SCK_HIGH_();
	_SCK_LOW_();
	_SCK_HIGH_();
	_SCK_LOW_();
	_CS_LOW_();
}




void _23lc1024_transfer(SPI_DATA * data){
	char code_addr[4];

	code_addr[0]= data->code;
	code_addr[1]= data->addr>>16;
	code_addr[2]= data->addr>>8;
	code_addr[3]= data->addr;

	_CS_LOW_();
	_SPI_begin();
	_CS_LOW_();

	_SPI_write_array(4,code_addr);
	if(_WR_CODE_ == data->code){
		_SPI_write_array(data->size, (char *)data->wr_data);
	}else if(_R_CODE_ == data->code){
		_SPI_read_array(data->size, (char *)data->rt_data);
	}
	_CS_HIGH_();
	_SPI_end();
	_CS_HIGH_();
}
/*-----------23LC1024_driver-------------*/

